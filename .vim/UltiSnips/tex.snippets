# ------------------------
# `math()` context for snippets
global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal
# ------------------------

snippet todo "Insert TODO reminder"
% TODO: (`echo $USER`) ${1:desc} <- `!v strftime("%c")`
endsnippet

snippet beg "begin{} / end{}" b
\begin{$1}
	$0
\end{$1}
endsnippet

snippet mk "Math" wA
$${1}$ $0
endsnippet

snippet dm "Display math" wA
\[
	$1
\] $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript a1 -> a_1" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2 a12 -> a_{12}" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


context "math()"
snippet '([A-Za-z])_{(\d\d)}(\d)' "auto subscript2 a123 -> a_{123}" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = str(match.group(2)) + str(match.group(3))`}
endsnippet

context "math()"
snippet sr "2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet sqrt "Square root" iA
\sqrt{$1}$0
endsnippet

context "math()"
snippet	tu "superscript" iA
^{$1}$0
endsnippet

context "math()"
snippet td "underscript" iA
_{$1}$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

context "math()"
snippet // "Fraction" iA
\\cfrac{$1}{$2}\, $0
endsnippet

context "math()"
snippet "(\ |^)\*\ " "Beautiful cdot" riA
 \cdot $0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\cfrac{`!p snip.rv = match.group(1)`}{$1}\, $0
endsnippet


priority 1000
context "math()"
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\cfrac{" + stripped[i+1:-1] + "}"
`{$1}\, $0
endsnippet

context "math()"
snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
context "math()"
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

priority 10
context "math()"
snippet over "over" iA
\overline{$1} $0
endsnippet

# priority 100
# snippet "([a-zA-Z])over" "over" riA
# \overline{`!p snip.rv=match.group(1)`}
# endsnippet

priority 10
context "math()"
snippet "hat" "hat" iA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet sum "Sum" iA
\sum\limits_{${1:k=0}}^{${2:+\infty}}$0
endsnippet

context "math()"
priority 1
snippet int "Integral" iA
\int\limits_{$1}^{$2}$0
endsnippet

context "math()"
priority 10
snippet 2int "Two int" iA
\iint\limits_{$1}^{$2}$0
endsnippet

context "math()"
priority 10
snippet 3int "Three int" iA
\iiint\limits_{$1}^{$2}$0
endsnippet

context "math()"
priority 10
snippet manyint "Many ints" iA
\idotsint\limits_{$1}^{$2}$0
endsnippet

snippet ali "Aling outside math mode" bi
\begin{align*}
	$1
\end{align*}
$0
endsnippet

snippet mali "Aligned in math mode" iA
\begin{aligned*}
	$1
\end{alignat*}
$0
endsnippet

context "math()"
snippet lrlr "Left-right braces" iA
\left$1 $2 \right${3:$1}$0
endsnippet

context "math()"
snippet any "For any" iA
\forall $0
endsnippet

context "math()"
snippet == "Equiv" iA
\equiv$0
endsnippet



# THEORPHYS
context "math()"
snippet "\<(.*?)\|" "bra" riA
\bra{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet "\|(.*?)\>" "ket" riA
\ket{`!p snip.rv = match.group(1).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet

context "math()"
snippet "(.*)\\bra{(.*?)}([^\|]*?)\>" "braket" riA
`!p snip.rv = match.group(1)`\braket{`!p snip.rv = match.group(2)`}{`!p snip.rv = match.group(3).replace('q', f'\psi').replace('f', f'\phi')`}
endsnippet
